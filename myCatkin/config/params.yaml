# MOWBOT ROS Parameters - YAML Format
#
# Axis orientation: Z up, X fwd, Y left
# Ego (rover) origin: centre of mass 
#
# Hardware highlights:
#   Tracking camera, Intel Realsense T265
#   Compute, NVidia Jetson Tx1
#   Lidar, A2 Lidar 
#   Motor, TRAXXAS Velinion 3500 (OEM on Slash, 4pole, 3500 rpm/volt ie: 3500kv)
#   Chassis, TRAXXAS Slash 4x4

# Steering Servo Parameters
# PWM Driver - servo - pca9685
pca9685_node:
        device: "/dev/i2c-0"
        address: 0x40 # 64 int, 0x40 hex
        frequency: 50 # for servo's, for LED's should b much higher
servo_left: 3800 # experimentally derived, traxxas slash 4x4 stock servo
servo_center: 5100 # experimentally derived, traxxas slash 4x4 stock servo
servo_right: 6700 # experimentally derived, traxxas slash 4x4 stock servo
servo_channel: 0 # 0..15, channel number of Adafruit PWM 16 Channel board to steering
k_pwmcmd_right_table_servo: [6700,
                             6650, 
                             6600, 
                             6500, 
                             6450, 
                             6400, 
                             6350, 
                             6250, 
                             6150, 
                             6050, 
                             5950, 
                             5900, 
                             5600, 
                             5300, 
		                         5100] # Output pwm command to servo 

k_pwmcmd_left_table_servo:  [ 3800,
                              3830, 
                              3840, 
                              3850, 
                              3860, 
                              3870, 
                              3880, 
                              3890, 
                              3900, 
                              3950, 
                              4000, 
                              4300, 
                              4600, 
                              4900, 
			                        5100] # Output pwm command to servo 
m_turnrad_axis_servo:    [ 1,
                           2,
                           3,
                           4,
                           5,
                           6,
                           7,
                          10,
                          20,
                          30,
                          40,
                          60,
                          80,
                         100,
		                     300] # Input turn radius in meters

# VESC Motor controller parameters
vesc_driver_node:
  port: "/dev/ttyACM0" # Serial port of VESC, see /sys/class/tty/ttyA*

_min: 0.0 # VESC driver min, duty cycle 0..1
_max: 0.5 # VESC driver max, duty cycle 0..1

speed_to_erpm_gain: 4449.0 # MOWBOT Calibration, erpm: rpm*number_of_poles
speed_to_erpm_offset: 0.0 # MOWBOT Calibration

kv_motor: 3500.0 # rpm/v, Traxxas Velinion 3500 BLDC

# SERVO Steering parameters
k_steer_ang_to_servo_gain: -0.7645 # MOWBOT Calibration
k_steer_ang_to_servo_offset: 0.490 # MOWBOT Calibration

# TELEOP Throttle axle torque lookup table
rpm_motor_axis_telethrotmap: [0.0,
                           3000.0,
                           6000.0,
                           9000.0,
                          12000.0,
                          15000.0,
                          18000.0,
                          21000.0,
                          24000.0,
                          27000.0 ] # theoretical max rpm/s: 3500kv*12=42000rpm / 4400 rad/s - unachievable!
                          # column axis for M_axle_lookup_...throt table 

pct_throt_axis_telethrotmap: [ -0.5,
                                0.0,
                                0.03,
                                0.2,
                                0.4,
                                0.6,
                                0.8,
                                1.0]
                        # row axis for M_axle_lookup...throt table. Input is throttle position
                        # between 0 and 1. A dedband (3%) is placed around 0% throttle.

M_axle_lookup_telethrotmap:           [-0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2,
                                       0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                                       0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                                       0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.00,
                                       0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.00,
                                       1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 0.00,
                                       1.67, 1.67, 1.67, 1.67, 1.67, 1.67, 1.67, 1.67, 1.67, 0.00,
                                       2.00, 2.00, 2.00, 2.00, 2.00, 2.00, 2.00, 2.00, 2.00, 0.00 ]
                        # X-Y lookup table of axle torque desired ("Pedal Map"). Column axis being RPM,
                        # row axis being throttle position %. Used to convert throttle position when
                        # in a tele-op mode to axle torque desired.
                        # theoretical max motor torque: 8.3*Ia/kv=8.3*100Amps/3500kv=0.237Nm
                        # theoretical max axle torque - no lossess: 0.237Nm*11.82driveratio=2.80Nm
                        # TODO: access throttle % axis from parse of param name
                        # Gripe: YAML format is akward for 2D arrays, and not supported by ros param
#M_axle_lookup_telethrotmap_000throt:  [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
#M_axle_lookup_telethrotmap_003throt:  [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
#M_axle_lookup_telethrotmap_020throt:  [0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.00 ]
#M_axle_lookup_telethrotmap_040throt:  [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 0.00 ]
#M_axle_lookup_telethrotmap_060throt:  [1.33, 1.33, 1.33, 1.33, 1.33, 1.33, 1.33, 1.33, 1.33, 0.00 ]
#M_axle_lookup_telethrotmap_080throt:  [1.67, 1.67, 1.67, 1.67, 1.67, 1.67, 1.67, 1.67, 1.67, 0.00 ]
#M_axle_lookup_telethrotmap_100throt:  [2.00, 2.00, 2.00, 2.00, 2.00, 2.00, 2.00, 2.00, 2.00, 0.00 ]
# NOTE: Do not need to do this^. Instead, define a vector & reshape in starting code for node.
# A dynamicly allocated array can be used in this case, where the dimentions are given by the lookup
# axis lengths. This allows total separation of calibration size / density & code (lookup might be
# tricky because it populates size at compile time... not sure if params can propogate like that)

# MOWBOT Rover parameters
l_wheelbase: 0.324 # m,  MOWBOT Calibration
l_track: 0.18 # m, 
l_minturnradphys: 1.0 #m, min possible turn radius, physical limit
m_rover: 7.1 # kg, 
I_inertia_z: 69.0 # m^4, 
r_driveratio: 11.82 # unitless, overall reduction motor to wheels
k_spinloss: 0.001 # Nm/rpm_axle, drivetrain losses
l_wheel: 0.109 # m, tire diameter
l_dist_per_rev: 0.342 # m, meters per revolution
r_meter_per_tachtick: 0.00225 # m, meters per tach tick of drive motor
a_motor_current_max: 20.0 # amps
a_motor_current_min: -10.0 # amps
k_motor_rpm_filt: 0.05 # algo: y=yprev*(1-k)+ycurr*k, basic filter

# TRACKING Camera parameters, intel T265
track_dx: 0.10 # m, motor offset from rover origin
track_dy: 0.0 # m, motor offset from rover origin
track_dz: 0.10 # m, motor offset from roer origin
track_fov: 163 # deg, camera field of view
track_resx: 848 # pixels, x
track_resy: 800 # pixels, y
track_binocsep: 0.064 # m, separation between imagers
track_rotation_x: -90 # deg, camera to rover
track_rotation_z: 180 # deg, camera to rover
track_rotation_y: 180 #deg, camera to rover
track_transform_x: [0.0, 0.0, -1.0] # transform x,y,z, realsense to rover coord
track_transform_y: [-1.0, 0.0, 0.0] # transform x,y,z, realsense to rover coord
track_transform_z: [0.0, 1.0, 0.0] # transform x,y,z, realsense to rover coord

# LIDAR Camera parameters, A2 Lidar
lidar_port: "/dev/ttyUSB0"
lidar_baud: "115200"
lidar_dx: 0.15 # m, lidar offset from rover origin
lidar_dy: 0.00 # m, lidar offset from rover origin
lidar_dz: 0.05 # m, lidar offset from rover origin

# GAMEPAD Teleoperation parameters, Logitech F710 
#    Help utility: 
#      sudo apt-get install jstest-gtk
#      jstest /dev/input/js1 (your port may vary)
#    
#    below button asignment given selector switch on gamepad set to "D" (not "X")
#    biggest difference with "X" mode - lt & rt become progressive, not on/off buttons
#    
#    button  description
#    0       x,blue
#    1       a,green
#    2       b,red
#    3       y,yellow
#    4       lb
#    5       rb
#    6       lt
#    7       rt
#    8       back
#    9       start
#    
#    base axes:             joy_node axes:  description:
#    0_ -32767 L, 32767 R   4_ 1 L, -1 R    directional pad
#    1_ -32767 U, 32767 D   5_ 1 U, -1 D    directional pad
#    2_ -32767 L, 32767 R   2_ 1 L, -1 R    right joystick 
#    3_ -32767 U, 32767 D   3_ 1 U, -1 D    right joystick 
#    4_ -32767 L, 32767 R   0_ 1 L, -1 R    left joystick  
#    5_ -32767 U, 32767 D   1_ 1 U, -1 D    left joystick  
#    
#    Node layout:
#    joy_node    - base ROS driver interface with controller
#                - detect button pressess / joystick positions
#                - populate "joy" topic
#                  - field, axis[6] float
#                  - field, buttons[12] float
#    teleop_logi - logic assigning button pushes to controller actions
#                - subscribe "joy" topic
#                - pulish "teleop_cmd" topic
#    
#    Logical assignment:
#      teleop_logi node
#      (default)       : no action mode, nothing pressed, motor commanded to zero
#      lb              : tele_dedman_btn : teleop mode, deadman switch, when held user uses gamepad for steering / throttle
#      left joystick   : tele_steer_ax   : teleop mode, steering L/R
#      right joystick  : tele_throt_ax   : teleop mode, throttle U
#      rb              : av_dedman_btn   : autonomous mode, deadman switch, must be held to avoid no action mode
#      start           : av_start_btn    : autonomous mode, signals logic to honor av steering / throttle commands
#      back            : av_pause_btn    : autonomous mode, signals logic to stop honoring av steering / throttle commands
#      x,blue          : av_throtup_btn  : autonomous mode, signals logic to step up throttle command
#      a,green         : av_throtdn_btn  : autonomous mode, signals logic to step down throttle command
#      y,yellow        : ros_start_btn   : autonomous mode, signals logic to record ROS Bag
#      b,red           : ros_stop_btn    : autonomous mode, signals logic to stop recording ROS Bag
teleop_logi:
  tele_dedman_btn: 4
  tele_steer_ax: 0
  tele_throt_ax: 3
  av_dedman_btn: 5
  av_start_btn: 9
  av_pause_btn: 8
  av_throtup_btn: 0
  av_throtdn_btn: 1
  av_manthrot_btn: 6
  ros_start_btn: 3
  ros_stop_btn: 2
  AV_THROT_NC: 0
  AV_THROT_INC: 1
  AV_THROT_DEC: 2
  AV_THROT_MAN: 3
